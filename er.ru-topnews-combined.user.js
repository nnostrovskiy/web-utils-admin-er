// ==UserScript==
// @name         –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞—Ç—ã –¢–û–ü –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤
// @namespace    https://github.com/nnostrovskiy/web-utils-admin-er
// @version      1.0.0
// @description  –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞—Ç—É –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¢–û–ü –Ω–æ–≤–æ—Å—Ç–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é –≤–ø–µ—Ä–µ–¥ –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –≤–≤–æ–¥ –¥–æ 90 —Å–∏–º–≤–æ–ª–æ–≤ –≤ –ø–æ–ª–µ "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Ç–æ–ø –Ω–æ–≤–æ—Å—Ç–∏" —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Å—á–µ—Ç—á–∏–∫–∞. –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
// @author       –û—Å—Ç—Ä–æ–≤—Å–∫–∏–π –ù–∏–∫–æ–ª–∞–π –ù–∏–∫–æ–ª–∞–µ–≤–∏—á, –ó–∞–ø–æ—Ä–æ–∂—Å–∫–æ–µ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ –ü–∞—Ä—Ç–∏–∏ ¬´–ï–¥–∏–Ω–∞—è –†–æ—Å—Å–∏—è¬ª
// @match        https://admin.er.ru/admin/news/create
// @match        https://admin.er.ru/admin/news/*/edit
// @grant        GM_xmlhttpRequest
// @grant        GM_getValue
// @grant        GM_setValue
// @grant        GM_notification
// @grant        GM_log
// @grant        GM_unload
// @run-at       document-end
// @updateURL    https://raw.githubusercontent.com/nnostrovskiy/web-utils-admin-er/main/er.ru-topnews-combined.user.js
// @downloadURL  https://raw.githubusercontent.com/nnostrovskiy/web-utils-admin-er/main/er.ru-topnews-combined.user.js
// ==/UserScript==

(function() {
    'use strict';

    // ===== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø =====
    const CONFIG = {
        debugMode: true,
        maxWaitTime: 15000,
        pollInterval: 500,
        updateCheckInterval: 86400000, // 24 —á–∞—Å–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        githubRawUrl: 'https://raw.githubusercontent.com/nnostrovskiy/web-utils-admin-er/main/er.ru-topnews-combined.user.js',
        lastCheckKey: 'lastUpdateCheck_combined_v1',
        ignoreUpdateKey: 'ignoreUpdateVersion_combined_v1',
        dateOffsetDays: 7,
        maxTitleLength: 90,
        visualStyles: {
            // –°—Ç–∏–ª–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –¥–∞—Ç
            successBackground: '#d4edda',
            successBorder: '#28a745',
            inputBackground: '#f0f9ff',
            inputBorder: '#3b82f6',
            focusBackground: '#e1f5fe',
            focusBorder: '#0288d1',
            indicatorGradient: 'linear-gradient(135deg, #3b82f6, #1d4ed8)',
            successStateBackground: '#ecfdf5',
            successStateBorder: '#10b981',
            
            // –°—Ç–∏–ª–∏ –¥–ª—è —Å—á–µ—Ç—á–∏–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤
            counterNormal: '#4caf50',
            counterWarning: '#ff9800',
            counterExceeded: '#ff0000',
            inputFocusBorder: '#4caf50',
            inputFocusShadow: 'rgba(76, 175, 80, 0.3)',
            warningBorder: '#ff9800',
            exceededBorder: '#ff0000',
            exceededBackground: '#ffe6e6'
        }
    };

    // ===== –°–ò–°–¢–ï–ú–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø =====
    const logger = {
        log: function(...args) {
            if (CONFIG.debugMode) {
                console.log('üìù –¢–û–ü-–ù–æ–≤–æ—Å—Ç–∏:', ...args);
            }
        },
        error: function(...args) {
            console.error('‚ùå –¢–û–ü-–ù–æ–≤–æ—Å—Ç–∏:', ...args);
        },
        warn: function(...args) {
            console.warn('‚ö†Ô∏è –¢–û–ü-–ù–æ–≤–æ—Å—Ç–∏:', ...args);
        },
        info: function(...args) {
            if (CONFIG.debugMode) {
                console.info('‚ÑπÔ∏è –¢–û–ü-–ù–æ–≤–æ—Å—Ç–∏:', ...args);
            }
        }
    };

    // ===== –£–¢–ò–õ–ò–¢–´ –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–û–ö =====
    function safeExecute(operation, operationName, fallback = null) {
        try {
            const result = operation();
            logger.log(`‚úÖ ${operationName} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
            return result;
        } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ –≤ ${operationName}:`, error);
            return fallback;
        }
    }

    function debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }

    // ===== –°–ò–°–¢–ï–ú–ê –û–ñ–ò–î–ê–ù–ò–Ø –≠–õ–ï–ú–ï–ù–¢–û–í =====
    function waitForElement(selector, timeout = CONFIG.maxWaitTime) {
        return new Promise((resolve, reject) => {
            const startTime = Date.now();
            
            const checkElement = () => {
                const element = document.querySelector(selector);
                if (element) {
                    resolve(element);
                    return true;
                }
                return false;
            };

            if (checkElement()) return;

            const observer = new MutationObserver(() => {
                if (checkElement()) {
                    observer.disconnect();
                } else if (Date.now() - startTime > timeout) {
                    observer.disconnect();
                    reject(new Error(`–≠–ª–µ–º–µ–Ω—Ç ${selector} –Ω–µ –Ω–∞–π–¥–µ–Ω –∑–∞ ${timeout}–º—Å`));
                }
            });

            observer.observe(document.body, {
                childList: true,
                subtree: true
            });

            setTimeout(() => {
                observer.disconnect();
                if (!checkElement()) {
                    reject(new Error(`–¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞: ${selector}`));
                }
            }, timeout);
        });
    }

    // ===== –°–ò–°–¢–ï–ú–ê –ü–†–û–í–ï–†–ö–ò –û–ë–ù–û–í–õ–ï–ù–ò–ô =====
    function compareVersions(a, b) {
        const aParts = a.split('.').map(Number);
        const bParts = b.split('.').map(Number);
        
        for (let i = 0; i < Math.max(aParts.length, bParts.length); i++) {
            const aVal = aParts[i] || 0;
            const bVal = bParts[i] || 0;
            if (aVal > bVal) return 1;
            if (aVal < bVal) return -1;
        }
        return 0;
    }

    function checkForUpdates() {
        return safeExecute(() => {
            const lastCheck = GM_getValue(CONFIG.lastCheckKey, 0);
            const now = Date.now();
            
            if (now - lastCheck < CONFIG.updateCheckInterval) {
                logger.info('–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø—Ä–æ–ø—É—â–µ–Ω–∞ (–µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–æ 24 —á–∞—Å–∞)');
                return;
            }
            
            logger.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å–∫—Ä–∏–ø—Ç–∞...');
            GM_setValue(CONFIG.lastCheckKey, now);
            
            GM_xmlhttpRequest({
                method: 'GET',
                url: CONFIG.githubRawUrl + '?t=' + Date.now(),
                timeout: 10000,
                onload: function(response) {
                    safeExecute(() => {
                        if (response.status !== 200) {
                            logger.warn('–û—à–∏–±–∫–∞ HTTP –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:', response.status);
                            return;
                        }
                        
                        const scriptContent = response.responseText;
                        const versionMatch = scriptContent.match(/@version\s+([\d.]+)/);
                        
                        if (!versionMatch) {
                            logger.warn('–í–µ—Ä—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ñ–∞–π–ª–µ');
                            return;
                        }
                        
                        const latestVersion = versionMatch[1];
                        const currentVersion = GM_info.script.version;
                        
                        logger.log(`–í–µ—Ä—Å–∏–∏: —Ç–µ–∫—É—â–∞—è ${currentVersion}, –¥–æ—Å—Ç—É–ø–Ω–∞—è ${latestVersion}`);
                        
                        if (compareVersions(latestVersion, currentVersion) > 0) {
                            showUpdateNotification(currentVersion, latestVersion);
                        } else {
                            logger.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
                        }
                    }, '–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
                },
                onerror: function(error) {
                    logger.error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:', error);
                },
                ontimeout: function() {
                    logger.warn('–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π');
                }
            });
        }, 'checkForUpdates');
    }

    function showUpdateNotification(currentVersion, latestVersion) {
        safeExecute(() => {
            const ignoredVersion = GM_getValue(CONFIG.ignoreUpdateKey, '');
            if (ignoredVersion === latestVersion) {
                logger.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:', latestVersion);
                return;
            }
            
            const notificationDetails = 
                `–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: ${currentVersion}\n` +
                `–î–æ—Å—Ç—É–ø–Ω–∞ –≤–µ—Ä—Å–∏—è: ${latestVersion}\n\n` +
                `–ß—Ç–æ –Ω–æ–≤–æ–≥–æ:\n` +
                `‚Ä¢ –û–±—ä–µ–¥–∏–Ω–µ–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–∞—Ç—ã –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤\n` +
                `‚Ä¢ –£–ª—É—á—à–µ–Ω–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã\n` +
                `‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å`;
            
            if (typeof GM_notification === 'function') {
                GM_notification({
                    title: '–î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞! üöÄ',
                    text: `–í–µ—Ä—Å–∏—è ${latestVersion} –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏`,
                    image: 'https://github.com/favicon.ico',
                    timeout: 10000,
                    onclick: function() {
                        handleUpdateConfirmation(currentVersion, latestVersion, notificationDetails);
                    }
                });
            } else {
                handleUpdateConfirmation(currentVersion, latestVersion, notificationDetails);
            }
        }, 'showUpdateNotification');
    }

    function handleUpdateConfirmation(currentVersion, latestVersion, details) {
        const userChoice = confirm(
            '–î–û–°–¢–£–ü–ù–û –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–ö–†–ò–ü–¢–ê!\n\n' +
            details + '\n\n' +
            '–í–ê–ñ–ù–û: –°–∫—Ä–∏–ø—Ç –Ω–µ –º–æ–∂–µ—Ç –æ–±–Ω–æ–≤–∏—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n\n' +
            '–ß—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:\n' +
            '1. –ù–∞–∂–º–∏—Ç–µ OK —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —É—Å—Ç–∞–Ω–æ–≤–∫–∏\n' +
            '2. –ù–∞ –æ—Ç–∫—Ä—ã–≤—à–µ–π—Å—è —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–∞–∂–º–∏—Ç–µ "–û–±–Ω–æ–≤–∏—Ç—å"\n' +
            '3. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É\n\n' +
            '–ù–∞–∂–º–∏—Ç–µ OK —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–ª–∏ –û—Ç–º–µ–Ω–∞ —á—Ç–æ–±—ã –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ.'
        );
        
        if (userChoice) {
            window.location.href = CONFIG.githubRawUrl;
        } else {
            GM_setValue(CONFIG.ignoreUpdateKey, latestVersion);
            logger.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:', latestVersion);
        }
    }

    // ===== –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê –£–°–¢–ê–ù–û–í–ö–ò –î–ê–¢–´ =====
    let lastProcessedDate = '';

    function calculateEndDate(startDateValue) {
        return safeExecute(() => {
            if (!startDateValue || typeof startDateValue !== 'string') {
                throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏');
            }

            if (startDateValue === lastProcessedDate) {
                return null;
            }

            const [datePart, timePart = '00:00'] = startDateValue.split(' ');
            const [day, month, year] = datePart.split('.').map(Number);
            
            if (!day || !month || !year || day > 31 || month > 12 || year < 2000) {
                throw new Error(`–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: ${startDateValue}`);
            }

            const startDate = new Date(year, month - 1, day);
            
            if (isNaN(startDate.getTime())) {
                throw new Error(`–ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞: ${startDateValue}`);
            }

            const endDate = new Date(startDate);
            endDate.setDate(endDate.getDate() + CONFIG.dateOffsetDays);
            
            const formattedEndDate =
                `${String(endDate.getDate()).padStart(2, '0')}.` +
                `${String(endDate.getMonth() + 1).padStart(2, '0')}.` +
                `${endDate.getFullYear()} ${timePart}`;

            lastProcessedDate = startDateValue;

            logger.log(`–†–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –¥–∞—Ç–∞: ${startDateValue} ‚Üí ${formattedEndDate}`);
            return formattedEndDate;
        }, 'calculateEndDate', null);
    }

    function setTopEndDate() {
        return safeExecute(() => {
            logger.log('–ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–∞—Ç—ã –¢–û–ü –Ω–æ–≤–æ—Å—Ç–∏...');
            
            const startDateInput = document.querySelector('input[name="start_date"]');
            const topEndDateInput = document.querySelector('input[name="top_end_date"]');

            if (!startDateInput || !topEndDateInput) {
                logger.warn('–ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –Ω–∞–π–¥–µ–Ω—ã');
                return false;
            }

            const startDateValue = startDateInput.value.trim();
            if (!startDateValue) {
                logger.log('–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø—É—Å—Ç–∞—è - –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞');
                return false;
            }

            const formattedEndDate = calculateEndDate(startDateValue);
            if (!formattedEndDate) {
                return true;
            }

            if (topEndDateInput.value !== formattedEndDate) {
                topEndDateInput.value = formattedEndDate;
                
                const events = ['change', 'input', 'blur'];
                events.forEach(eventType => {
                    topEndDateInput.dispatchEvent(new Event(eventType, { 
                        bubbles: true, 
                        cancelable: true 
                    }));
                });
                
                logger.info('‚úÖ –î–∞—Ç–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¢–û–ü –Ω–æ–≤–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞:', formattedEndDate);
                showSuccessIndicator();
                return true;
            } else {
                logger.log('–î–∞—Ç–∞ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
                return true;
            }
        }, 'setTopEndDate', false);
    }

    // ===== –°–ò–°–¢–ï–ú–ê –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø –°–ò–ú–í–û–õ–û–í =====
    function setupCharCounter() {
        return safeExecute(() => {
            const titleTopInput = document.querySelector('input[name="title_top"]');
            if (!titleTopInput) {
                logger.warn('–ü–æ–ª–µ "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Ç–æ–ø –Ω–æ–≤–æ—Å—Ç–∏" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
                return false;
            }

            logger.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—è —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –ø–æ–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¢–û–ü...');

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ —Å—á–µ—Ç—á–∏–∫
            if (titleTopInput.parentNode.querySelector('.char-counter')) {
                logger.log('–°—á–µ—Ç—á–∏–∫ —Å–∏–º–≤–æ–ª–æ–≤ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
                return true;
            }

            // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å—á–µ—Ç—á–∏–∫–∞
            const counter = document.createElement('div');
            counter.className = 'char-counter';
            counter.style.cssText = `
                font-size: 12px;
                color: ${CONFIG.visualStyles.counterNormal};
                text-align: right;
                margin-top: 5px;
                margin-bottom: 10px;
                font-weight: bold;
                transition: color 0.3s ease;
            `;

            // –í—Å—Ç–∞–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ—Å–ª–µ –ø–æ–ª—è –≤–≤–æ–¥–∞
            titleTopInput.parentNode.insertBefore(counter, titleTopInput.nextSibling);

            // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞
            function updateCounter() {
                const currentLength = titleTopInput.value.length;
                const remaining = CONFIG.maxTitleLength - currentLength;

                if (remaining < 0) {
                    // –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞
                    counter.style.color = CONFIG.visualStyles.counterExceeded;
                    counter.textContent = `–ü—Ä–µ–≤—ã—à–µ–Ω–æ –Ω–∞ ${Math.abs(remaining)} —Å–∏–º–≤–æ–ª–æ–≤ (–º–∞–∫—Å–∏–º—É–º: ${CONFIG.maxTitleLength})`;
                    
                    // –í–∏–∑—É–∞–ª—å–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–ª—è –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏
                    titleTopInput.classList.add('char-limit-exceeded');
                    titleTopInput.classList.remove('char-limit-warning');
                    
                    // –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç
                    if (currentLength > CONFIG.maxTitleLength) {
                        titleTopInput.value = titleTopInput.value.substring(0, CONFIG.maxTitleLength);
                        // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞
                        setTimeout(updateCounter, 0);
                    }
                } else if (remaining <= 10) {
                    // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ (–æ—Å—Ç–∞–ª–æ—Å—å 10 —Å–∏–º–≤–æ–ª–æ–≤ –∏–ª–∏ –º–µ–Ω—å—à–µ)
                    counter.style.color = CONFIG.visualStyles.counterWarning;
                    counter.textContent = `–û—Å—Ç–∞–ª–æ—Å—å —Å–∏–º–≤–æ–ª–æ–≤: ${remaining}/${CONFIG.maxTitleLength}`;
                    
                    titleTopInput.classList.add('char-limit-warning');
                    titleTopInput.classList.remove('char-limit-exceeded');
                } else {
                    // –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    counter.style.color = CONFIG.visualStyles.counterNormal;
                    counter.textContent = `–û—Å—Ç–∞–ª–æ—Å—å —Å–∏–º–≤–æ–ª–æ–≤: ${remaining}/${CONFIG.maxTitleLength}`;
                    
                    titleTopInput.classList.remove('char-limit-warning', 'char-limit-exceeded');
                }
            }

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç maxlength
            titleTopInput.setAttribute('maxlength', CONFIG.maxTitleLength);

            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            const debouncedUpdate = debounce(updateCounter, 100);
            
            const events = ['input', 'change', 'keyup', 'focus', 'blur'];
            events.forEach(eventType => {
                titleTopInput.addEventListener(eventType, debouncedUpdate, {
                    passive: true,
                    capture: false
                });
            });

            titleTopInput.addEventListener('paste', function(e) {
                setTimeout(debouncedUpdate, 10);
            });

            // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è
            const observer = new MutationObserver(function(mutations) {
                mutations.forEach(function(mutation) {
                    if (mutation.type === 'attributes' && mutation.attributeName === 'value') {
                        debouncedUpdate();
                    }
                });
            });

            observer.observe(titleTopInput, {
                attributes: true,
                attributeFilter: ['value']
            });

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ—á–∏—Å—Ç–∫–∏
            window._topNewsObservers = window._topNewsObservers || [];
            window._topNewsObservers.push(observer);

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫
            updateCounter();

            logger.info('‚úÖ –û–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—å —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
            return true;
        }, 'setupCharCounter', false);
    }

    // ===== –í–ò–ó–£–ê–õ–¨–ù–´–ï –ò–ù–î–ò–ö–ê–¢–û–†–´ –ò –°–¢–ò–õ–ò =====
    function showSuccessIndicator() {
        safeExecute(() => {
            const topEndInput = document.querySelector('input[name="top_end_date"]');
            if (topEndInput) {
                // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —Å—Ç–∏–ª–µ–π
                topEndInput.style.backgroundColor = CONFIG.visualStyles.successBackground;
                topEndInput.style.borderColor = CONFIG.visualStyles.successBorder;
                
                setTimeout(() => {
                    topEndInput.style.backgroundColor = '';
                    topEndInput.style.borderColor = '';
                }, 2000);
            }
        }, 'showSuccessIndicator');
    }

    function addVisualStyles() {
        return safeExecute(() => {
            const style = document.createElement('style');
            style.id = 'top-news-combined-styles';
            
            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö CSS —Å—Ç–∏–ª–µ–π –∏ —Ü–≤–µ—Ç–æ–≤ –¥–ª—è –æ–±–µ–∏—Ö —Å–∏—Å—Ç–µ–º
            style.textContent = `
                /* –°—Ç–∏–ª–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–∞—Ç—ã */
                input[name="top_end_date"] {
                    background-color: ${CONFIG.visualStyles.inputBackground} !important;
                    border: 2px solid ${CONFIG.visualStyles.inputBorder} !important;
                    position: relative;
                    transition: all 0.3s ease;
                }
                input[name="top_end_date"]:focus {
                    background-color: ${CONFIG.visualStyles.focusBackground} !important;
                    border-color: ${CONFIG.visualStyles.focusBorder} !important;
                }
                .auto-date-indicator {
                    position: absolute;
                    right: 8px;
                    top: 50%;
                    transform: translateY(-50%);
                    background: ${CONFIG.visualStyles.indicatorGradient};
                    color: white;
                    padding: 3px 8px;
                    border-radius: 4px;
                    font-size: 11px;
                    font-weight: bold;
                    pointer-events: none;
                    z-index: 1000;
                    box-shadow: 0 2px 4px rgba(0,0,0,0.2);
                }
                .auto-date-success {
                    border-color: ${CONFIG.visualStyles.successStateBorder} !important;
                    background-color: ${CONFIG.visualStyles.successStateBackground} !important;
                }

                /* –°—Ç–∏–ª–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤ */
                input[name="title_top"] {
                    border-width: 2px !important;
                    transition: border-color 0.3s ease, background-color 0.3s ease !important;
                }
                input[name="title_top"]:focus {
                    border-color: ${CONFIG.visualStyles.inputFocusBorder} !important;
                    box-shadow: 0 0 5px ${CONFIG.visualStyles.inputFocusShadow} !important;
                }
                .char-limit-warning {
                    border-color: ${CONFIG.visualStyles.warningBorder} !important;
                }
                .char-limit-exceeded {
                    border-color: ${CONFIG.visualStyles.exceededBorder} !important;
                    background-color: ${CONFIG.visualStyles.exceededBackground} !important;
                }
            `;
            
            document.head.appendChild(style);

            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–ª—è –ø–æ–ª—è –¥–∞—Ç—ã
            const addDateIndicator = () => {
                const topEndInput = document.querySelector('input[name="top_end_date"]');
                if (topEndInput && !topEndInput.parentNode.querySelector('.auto-date-indicator')) {
                    const indicator = document.createElement('div');
                    indicator.className = 'auto-date-indicator';
                    indicator.textContent = '–∞–≤—Ç–æ';
                    indicator.title = '–î–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏';
                    
                    topEndInput.parentNode.style.position = 'relative';
                    topEndInput.parentNode.appendChild(indicator);
                    
                    topEndInput.classList.add('auto-date-success');
                    
                    logger.log('‚úÖ –í–∏–∑—É–∞–ª—å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–ª—è –¥–∞—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω');
                }
            };

            setTimeout(addDateIndicator, 500);
            
            const indicatorObserver = new MutationObserver(addDateIndicator);
            indicatorObserver.observe(document.body, {
                childList: true,
                subtree: true
            });

            window._topNewsObservers = window._topNewsObservers || [];
            window._topNewsObservers.push(indicatorObserver);

            return true;
        }, 'addVisualStyles', false);
    }

    // ===== –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–û–ë–´–¢–ò–Ø–ú–ò –ò –ù–ê–ë–õ–Æ–î–ê–¢–ï–õ–Ø–ú–ò =====
    function setupEventListeners() {
        return safeExecute(() => {
            let listenersSetup = false;

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –¥–∞—Ç
            const startDateInput = document.querySelector('input[name="start_date"]');
            if (startDateInput) {
                logger.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–æ–ª—è –¥–∞—Ç—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏...');

                const debouncedDateHandler = debounce(() => {
                    setTimeout(setTopEndDate, 100);
                }, 500);

                const events = ['change', 'input', 'blur'];
                events.forEach(eventType => {
                    startDateInput.addEventListener(eventType, debouncedDateHandler, {
                        passive: true,
                        capture: false
                    });
                });

                const attributeObserver = new MutationObserver(function(mutations) {
                    mutations.forEach(function(mutation) {
                        if (mutation.type === 'attributes' && 
                            (mutation.attributeName === 'value' || mutation.attributeName === 'data-value')) {
                            debouncedDateHandler();
                        }
                    });
                });

                attributeObserver.observe(startDateInput, {
                    attributes: true,
                    attributeFilter: ['value', 'data-value']
                });

                window._topNewsObservers = window._topNewsObservers || [];
                window._topNewsObservers.push(attributeObserver);
                listenersSetup = true;
            }

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤
            if (setupCharCounter()) {
                listenersSetup = true;
            }

            if (listenersSetup) {
                logger.info('‚úÖ –í—Å–µ —Å–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
                return true;
            } else {
                logger.warn('–ù–µ –≤—Å–µ —Å–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å');
                return false;
            }
        }, 'setupEventListeners', false);
    }

    // ===== –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò =====
    async function initialize() {
        logger.info('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ –¢–û–ü –Ω–æ–≤–æ—Å—Ç–µ–π...');

        try {
            // –û–∂–∏–¥–∞–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π
            await Promise.race([
                waitForElement('input[name="start_date"]'),
                waitForElement('input[name="top_end_date"]'),
                waitForElement('input[name="title_top"]')
            ]);

            logger.log('‚úÖ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –Ω–∞–π–¥–µ–Ω—ã');

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤—Å–µ —Å–∏—Å—Ç–µ–º—ã
            setupEventListeners();
            addVisualStyles();
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É –¥–∞—Ç—ã
            setTimeout(setTopEndDate, 1000);

        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
            
            // –†–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º –ø–æ–∏—Å–∫–∞ –ø–æ–ª–µ–π
            const backupCheck = setInterval(() => {
                const hasRequiredFields = 
                    document.querySelector('input[name="start_date"]') &&
                    document.querySelector('input[name="top_end_date"]') &&
                    document.querySelector('input[name="title_top"]');
                
                if (hasRequiredFields) {
                    clearInterval(backupCheck);
                    logger.log('‚úÖ –ü–æ–ª—è –Ω–∞–π–¥–µ–Ω—ã —á–µ—Ä–µ–∑ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É');
                    setupEventListeners();
                    addVisualStyles();
                    setTopEndDate();
                }
            }, 1000);

            setTimeout(() => {
                clearInterval(backupCheck);
                logger.log('–†–µ–∑–µ—Ä–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
            }, CONFIG.maxWaitTime);
        }
    }

    // ===== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ñ–ò–ó–ù–ï–ù–ù–´–ú –¶–ò–ö–õ–û–ú =====
    function cleanup() {
        logger.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ —Å–∫—Ä–∏–ø—Ç–∞...');
        
        // –û—á–∏—Å—Ç–∫–∞ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π
        if (window._topNewsObservers) {
            window._topNewsObservers.forEach(observer => {
                safeExecute(() => observer.disconnect(), '–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è');
            });
            window._topNewsObservers = [];
        }
        
        // –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π
        const styles = document.getElementById('top-news-combined-styles');
        if (styles) {
            safeExecute(() => styles.remove(), '–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π');
        }
        
        // –£–¥–∞–ª–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        const indicators = document.querySelectorAll('.auto-date-indicator, .char-counter');
        indicators.forEach(indicator => {
            safeExecute(() => indicator.remove(), '–£–¥–∞–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞');
        });
        
        // –°–±—Ä–æ—Å –∫–ª–∞—Å—Å–æ–≤ —Å—Ç–∏–ª–µ–π
        const styledInputs = document.querySelectorAll('.auto-date-success, .char-limit-warning, .char-limit-exceeded');
        styledInputs.forEach(input => {
            input.classList.remove('auto-date-success', 'char-limit-warning', 'char-limit-exceeded');
        });
        
        logger.log('‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    }

    // ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô –ñ–ò–ó–ù–ï–ù–ù–û–ì–û –¶–ò–ö–õ–ê =====
    if (typeof GM_unload === 'function') {
        GM_unload(cleanup);
    }
    
    window.addEventListener('beforeunload', cleanup);
    window.addEventListener('pagehide', cleanup);

    // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    const globalObserver = new MutationObserver(debounce(function(mutations) {
        safeExecute(() => {
            let foundNewFields = false;
            
            mutations.forEach(function(mutation) {
                if (mutation.addedNodes.length) {
                    mutation.addedNodes.forEach(function(node) {
                        if (node.nodeType === 1 && node.querySelector) {
                            if (node.querySelector('input[name="start_date"]') || 
                                node.querySelector('input[name="title_top"]')) {
                                foundNewFields = true;
                            }
                        }
                    });
                }
            });
            
            if (foundNewFields) {
                logger.log('üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—è');
                setTimeout(() => {
                    setupEventListeners();
                    setTopEndDate();
                }, 500);
            }
        }, '–û–±—Ä–∞–±–æ—Ç–∫–∞ –º—É—Ç–∞—Ü–∏–π DOM');
    }, 500));

    // ===== –ó–ê–ü–£–°–ö –°–ö–†–ò–ü–¢–ê =====
    function startScript() {
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', function() {
                logger.log('üìÑ DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –∑–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...');
                globalObserver.observe(document.body, {
                    childList: true,
                    subtree: true
                });
                initialize();
                
                // –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
                setTimeout(checkForUpdates, 10000);
            });
        } else {
            logger.log('üìÑ DOM —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –∑–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...');
            globalObserver.observe(document.body, {
                childList: true,
                subtree: true
            });
            initialize();
            
            setTimeout(checkForUpdates, 10000);
        }

        window.addEventListener('load', function() {
            logger.log('üéØ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω–∞, —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...');
            setTimeout(() => {
                setTopEndDate();
            }, 2000);
        });
    }

    // –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    startScript();

})();