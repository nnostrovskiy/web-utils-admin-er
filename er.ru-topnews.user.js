// ==UserScript==
// @name         –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–æ–≤–æ—Å—Ç–∏
// @namespace    http://tampermonkey.net/
// @version      1.0.0
// @description  –î–µ–ª–∞–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–æ–≤–æ—Å—Ç–∏ –±–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω—ã–º —Å –ø–æ—è—Å–Ω–µ–Ω–∏—è–º–∏ –∏ —É–ª—É—á—à–µ–Ω–Ω–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π
// @author       –û—Å—Ç—Ä–æ–≤—Å–∫–∏–π –ù–∏–∫–æ–ª–∞–π –ù–∏–∫–æ–ª–∞–µ–≤–∏—á, –ó–∞–ø–æ—Ä–æ–∂—Å–∫–æ–µ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ –ü–∞—Ä—Ç–∏–∏ ¬´–ï–¥–∏–Ω–∞—è –†–æ—Å—Å–∏—è¬ª
// @match        https://admin.er.ru/admin/news/create
// @match        https://admin.er.ru/admin/news/*/edit
// @grant        none
// @run-at       document-end
// @updateURL    https://raw.githubusercontent.com/nnostrovskiy/web-utils-admin-er/main/er.ru-topnews.user.js
// @downloadURL  https://raw.githubusercontent.com/nnostrovskiy/web-utils-admin-er/main/er.ru-topnews.user.js
// ==/UserScript==

(function() {
    'use strict';

    // ===== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø =====
    const CONFIG = {
        debugMode: true,
        maxWaitTime: 15000,
        checkInterval: 500,
        toggleSelector: 'input[name="active"][class*="toggleswitch"]',
        visualStyles: {
            // üé® –¶–í–ï–¢–û–í–ê–Ø –°–•–ï–ú–ê –ò–ó –ü–†–ò–ú–ï–†–ê
            primaryBlue: '#3b82f6',
            primaryBlueDark: '#1d4ed8',
            primaryBlueLight: '#60a5fa',
            blueBackground: '#f0f9ff',
            blueFocusBackground: '#e1f5fe',
            blueBorder: '#3b82f6',
            blueFocusBorder: '#0288d1',
            successBackground: '#d4edda',
            successBorder: '#28a745',
            indicatorGradient: 'linear-gradient(135deg, #3b82f6, #1d4ed8)',
            successStateBackground: '#ecfdf5',
            successStateBorder: '#10b981',
            // üé® –¶–í–ï–¢–ê –°–ß–ï–¢–ß–ò–ö–ê –°–ò–ú–í–û–õ–û–í
            counterNormal: '#3b82f6',
            counterWarning: '#f59e0b',
            counterExceeded: '#ef4444',
            inputFocusBorder: '#3b82f6',
            inputFocusShadow: 'rgba(59, 130, 246, 0.3)',
            warningBorder: '#f59e0b',
            exceededBorder: '#ef4444',
            exceededBackground: '#fef2f2'
        }
    };

    // ===== –°–ò–°–¢–ï–ú–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø =====
    const logger = {
        info: (message, data = null) => {
            if (CONFIG.debugMode) {
                console.log(`‚ÑπÔ∏è ${message}`, data || '');
            }
        },
        success: (message, data = null) => {
            if (CONFIG.debugMode) {
                console.log(`‚úÖ ${message}`, data || '');
            }
        },
        error: (message, error = null) => {
            if (CONFIG.debugMode) {
                console.error(`‚ùå ${message}`, error || '');
            }
        },
        warn: (message, data = null) => {
            if (CONFIG.debugMode) {
                console.warn(`‚ö†Ô∏è ${message}`, data || '');
            }
        }
    };

    // ===== –£–¢–ò–õ–ò–¢–´ –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–û–ö =====
    function safeExecute(operation, operationName, fallback = null) {
        try {
            return operation();
        } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ –≤ –æ–ø–µ—Ä–∞—Ü–∏–∏: ${operationName}`, error);
            return fallback;
        }
    }

    // ===== –°–ò–°–¢–ï–ú–ê –û–ñ–ò–î–ê–ù–ò–Ø –≠–õ–ï–ú–ï–ù–¢–û–í =====
    function waitForElement(selector, timeout = CONFIG.maxWaitTime) {
        return new Promise((resolve, reject) => {
            const startTime = Date.now();
            
            const checkElement = () => {
                const element = document.querySelector(selector);
                if (element) {
                    resolve(element);
                    return;
                }
                
                if (Date.now() - startTime >= timeout) {
                    reject(new Error(`–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: ${selector}`));
                    return;
                }
                
                setTimeout(checkElement, CONFIG.checkInterval);
            };
            
            checkElement();
        });
    }

    // ===== –°–ò–°–¢–ï–ú–ê –ü–†–û–í–ï–†–ö–ò –û–ë–ù–û–í–õ–ï–ù–ò–ô =====
    function checkForUpdates() {
        logger.info('–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...');
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ @updateURL –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    }

    // ===== –í–ò–ó–£–ê–õ–¨–ù–´–ï –ò–ù–î–ò–ö–ê–¢–û–†–´ –ò –°–¢–ò–õ–ò =====
    function addVisualStyles() {
        return safeExecute(() => {
            const style = document.createElement('style');
            style.textContent = `
                /* üé® –°–¢–ò–õ–ò –ü–ï–†–ï–ö–õ–Æ–ß–ê–¢–ï–õ–Ø –ê–ö–¢–ò–í–ù–û–°–¢–ò */
                input[name="active"][class*="toggleswitch"] + .toggle .toggle-on {
                    background: ${CONFIG.visualStyles.indicatorGradient} !important;
                    color: white !important;
                    font-weight: bold !important;
                    text-shadow: 0 1px 2px rgba(0,0,0,0.2) !important;
                }

                input[name="active"][class*="toggleswitch"] + .toggle .toggle-off {
                    background: #6b7280 !important;
                    color: white !important;
                    font-weight: bold !important;
                }

                input[name="active"][class*="toggleswitch"] + .toggle .toggle-handle {
                    background: white !important;
                    border: 2px solid #e5e7eb !important;
                    box-shadow: 0 2px 4px rgba(0,0,0,0.1) !important;
                    transition: all 0.3s ease !important;
                }

                input[name="active"][class*="toggleswitch"]:checked + .toggle .toggle-handle {
                    border-color: ${CONFIG.visualStyles.primaryBlue} !important;
                    box-shadow: 0 2px 8px ${CONFIG.visualStyles.inputFocusShadow} !important;
                }

                /* üé® –°–¢–ò–õ–ò –ü–û–Ø–°–ù–Ø–Æ–©–ï–ì–û –ë–õ–û–ö–ê */
                .activity-explanation {
                    margin-top: 12px !important;
                    padding: 12px 16px !important;
                    border-radius: 8px !important;
                    font-size: 14px !important;
                    font-weight: 500 !important;
                    border-left: 4px solid !important;
                    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1) !important;
                    box-shadow: 0 2px 4px rgba(0,0,0,0.05) !important;
                }

                .activity-explanation.active {
                    background: ${CONFIG.visualStyles.successStateBackground} !important;
                    border-left-color: ${CONFIG.visualStyles.successStateBorder} !important;
                    color: #065f46 !important;
                }

                .activity-explanation.inactive {
                    background: ${CONFIG.visualStyles.exceededBackground} !important;
                    border-left-color: ${CONFIG.visualStyles.exceededBorder} !important;
                    color: #7f1d1d !important;
                }

                .activity-explanation .status-icon {
                    display: inline-block;
                    margin-right: 8px;
                    font-weight: bold;
                }

                .activity-explanation .hint {
                    font-size: 12px !important;
                    margin-top: 6px !important;
                    opacity: 0.8 !important;
                    font-weight: normal !important;
                }

                /* üé® –ê–ù–ò–ú–ê–¶–ò–ò */
                @keyframes pulseSuccess {
                    0% { box-shadow: 0 0 0 0 rgba(16, 185, 129, 0.4); }
                    70% { box-shadow: 0 0 0 10px rgba(16, 185, 129, 0); }
                    100% { box-shadow: 0 0 0 0 rgba(16, 185, 129, 0); }
                }

                .activity-explanation.active.pulse {
                    animation: pulseSuccess 2s infinite;
                }
            `;
            document.head.appendChild(style);
            logger.success('–í–∏–∑—É–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã');
            return style;
        }, '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —Å—Ç–∏–ª–µ–π');
    }

    // ===== –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê =====
    function enhanceActivityToggle() {
        return safeExecute(() => {
            logger.info('–ü–æ–∏—Å–∫ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏...');

            const checkToggle = setInterval(function() {
                const toggleSwitch = document.querySelector(CONFIG.toggleSelector);
                
                if (toggleSwitch) {
                    logger.success('–ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞–π–¥–µ–Ω', toggleSwitch);
                    clearInterval(checkToggle);
                    setupToggleEnhancements(toggleSwitch);
                }
            }, CONFIG.checkInterval);

            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
            setTimeout(() => {
                clearInterval(checkToggle);
                logger.warn('–ü–æ–∏—Å–∫ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ —Ç–∞–π–º–∞—É—Ç—É');
            }, CONFIG.maxWaitTime);

            return true;
        }, '–£–ª—É—á—à–µ–Ω–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏');
    }

    function setupToggleEnhancements(toggleSwitch) {
        return safeExecute(() => {
            const toggleContainer = toggleSwitch.closest('.form-group');
            
            if (!toggleContainer) {
                logger.error('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return false;
            }

            // –°–æ–∑–¥–∞–µ–º –ø–æ—è—Å–Ω—è—é—â–∏–π –±–ª–æ–∫
            const explanation = createExplanationElement();
            
            // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
            const updateExplanation = createUpdateHandler(toggleSwitch, explanation);
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            setupChangeTracking(toggleSwitch, updateExplanation);
            
            // –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—è—Å–Ω–µ–Ω–∏–µ –≤ DOM
            insertExplanationElement(toggleContainer, explanation, toggleSwitch);
            
            // –£–ª—É—á—à–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è
            enhanceToggleAppearance(toggleContainer);
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            updateExplanation();
            
            logger.success('–£–ª—É—á—à–µ–Ω–∏—è –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã');
            return true;
        }, '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–ª—É—á—à–µ–Ω–∏–π –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è');
    }

    function createExplanationElement() {
        const explanation = document.createElement('div');
        explanation.className = 'activity-explanation';
        explanation.setAttribute('data-enhanced', 'true');
        return explanation;
    }

    function createUpdateHandler(toggleSwitch, explanation) {
        return function() {
            const isActive = toggleSwitch.checked;
            
            if (isActive) {
                explanation.className = 'activity-explanation active pulse';
                explanation.innerHTML = `
                    <span class="status-icon">‚úÖ</span>
                    <strong>–ù–æ–≤–æ—Å—Ç—å –û–¢–û–ë–†–ê–ñ–ê–ï–¢–°–Ø –Ω–∞ —Å–∞–π—Ç–µ</strong>
                    <div class="hint">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤–∏–¥—è—Ç —ç—Ç—É –Ω–æ–≤–æ—Å—Ç—å –≤ –ª–µ–Ω—Ç–µ –∏ –º–æ–≥—É—Ç –µ–µ —á–∏—Ç–∞—Ç—å</div>
                `;
            } else {
                explanation.className = 'activity-explanation inactive';
                explanation.innerHTML = `
                    <span class="status-icon">‚ùå</span>
                    <strong>–ù–æ–≤–æ—Å—Ç—å –°–ö–†–´–¢–ê —Å —Å–∞–π—Ç–∞</strong>
                    <div class="hint">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –≤–∏–¥—è—Ç —ç—Ç—É –Ω–æ–≤–æ—Å—Ç—å –≤ –ª–µ–Ω—Ç–µ</div>
                `;
            }
        };
    }

    function setupChangeTracking(toggleSwitch, updateHandler) {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è change
        toggleSwitch.addEventListener('change', updateHandler);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è click –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        toggleSwitch.addEventListener('click', updateHandler);
        
        // MutationObserver –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ DOM
        const observer = new MutationObserver(function(mutations) {
            mutations.forEach(function(mutation) {
                if (mutation.type === 'attributes' && 
                    (mutation.attributeName === 'checked' || mutation.attributeName === 'class')) {
                    setTimeout(updateHandler, 10);
                }
            });
        });
        
        observer.observe(toggleSwitch, {
            attributes: true,
            attributeFilter: ['checked', 'class']
        });
        
        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ (–¥–ª—è bootstrap-toggle)
        const toggleParent = toggleSwitch.closest('.toggle');
        if (toggleParent) {
            const parentObserver = new MutationObserver(function(mutations) {
                mutations.forEach(function(mutation) {
                    if (mutation.type === 'attributes') {
                        setTimeout(updateHandler, 10);
                    }
                });
            });
            
            parentObserver.observe(toggleParent, {
                attributes: true,
                attributeFilter: ['class']
            });
        }
    }

    function insertExplanationElement(container, explanation, toggleSwitch) {
        const toggleWidget = container.querySelector('.toggle');
        if (toggleWidget) {
            toggleWidget.parentNode.insertBefore(explanation, toggleWidget.nextSibling);
        } else {
            container.appendChild(explanation);
        }
    }

    function enhanceToggleAppearance(container) {
        setTimeout(() => {
            const toggleBtn = container.querySelector('.toggle-group');
            if (toggleBtn) {
                const onLabel = toggleBtn.querySelector('.toggle-on');
                const offLabel = toggleBtn.querySelector('.toggle-off');
                
                if (onLabel) {
                    onLabel.textContent = '–ê–ö–¢–ò–í–ù–ê';
                    onLabel.style.fontWeight = 'bold';
                    onLabel.style.fontSize = '11px';
                    onLabel.style.padding = '0 10px';
                    onLabel.style.letterSpacing = '0.5px';
                }
                
                if (offLabel) {
                    offLabel.textContent = '–°–ö–†–´–¢–ê';
                    offLabel.style.fontWeight = 'bold';
                    offLabel.style.fontSize = '11px';
                    offLabel.style.padding = '0 10px';
                    offLabel.style.letterSpacing = '0.5px';
                }
            }
        }, 100);
    }

    // ===== –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–û–ë–´–¢–ò–Ø–ú–ò =====
    function setupEventListeners() {
        logger.info('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π...');
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω—ã –∑–¥–µ—Å—å
    }

    // ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø =====
    async function initialize() {
        logger.info('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏...');
        
        try {
            // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏
            await safeExecute(addVisualStyles, '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π');
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            await safeExecute(setupEventListeners, '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π');
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
            await safeExecute(enhanceActivityToggle, '–£–ª—É—á—à–µ–Ω–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            await safeExecute(checkForUpdates, '–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π');
            
            logger.success('‚úÖ –°–∫—Ä–∏–ø—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!');
            logger.info('üìù –ê–≤—Ç–æ—Ä: –û—Å—Ç—Ä–æ–≤—Å–∫–∏–π –ù–∏–∫–æ–ª–∞–π –ù–∏–∫–æ–ª–∞–µ–≤–∏—á, –ó–∞–ø–æ—Ä–æ–∂—Å–∫–æ–µ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ –ü–∞—Ä—Ç–∏–∏ ¬´–ï–¥–∏–Ω–∞—è –†–æ—Å—Å–∏—è¬ª');
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞', error);
        }
    }

    // ===== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ñ–ò–ó–ù–ï–ù–ù–´–ú –¶–ò–ö–õ–û–ú =====
    function cleanup() {
        logger.info('–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...');
        // –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    }

    // ===== –ó–ê–ü–£–°–ö –°–ö–†–ò–ü–¢–ê =====
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', function() {
            initialize().catch(error => {
                logger.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏', error);
            });
        });
    } else {
        initialize().catch(error => {
            logger.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏', error);
        });
    }

    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    window.addEventListener('beforeunload', cleanup);

})();
