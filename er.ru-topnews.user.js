// ==UserScript==
// @name         –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞—Ç—ã –¢–û–ü –Ω–æ–≤–æ—Å—Ç–∏ (–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)
// @namespace    https://github.com/nnostrovskiy/web-utils-admin-er
// @version      1.2.1
// @description  –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞—Ç—É –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¢–û–ü –Ω–æ–≤–æ—Å—Ç–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é –≤–ø–µ—Ä–µ–¥. –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
// @author       –û—Å—Ç—Ä–æ–≤—Å–∫–∏–π –ù–∏–∫–æ–ª–∞–π –ù–∏–∫–æ–ª–∞–µ–≤–∏—á, –ó–∞–ø–æ—Ä–æ–∂—Å–∫–æ–µ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ –ü–∞—Ä—Ç–∏–∏ ¬´–ï–¥–∏–Ω–∞—è –†–æ—Å—Å–∏—è¬ª
// @match        https://admin.er.ru/admin/news/create
// @match        https://admin.er.ru/admin/news/*/edit
// @grant        GM_xmlhttpRequest
// @grant        GM_getValue
// @grant        GM_setValue
// @grant        GM_notification
// @grant        GM_log
// @grant        GM_unload
// @run-at       document-end
// @updateURL    https://raw.githubusercontent.com/nnostrovskiy/web-utils-admin-er/main/er.ru-topnews.user.js
// @downloadURL  https://raw.githubusercontent.com/nnostrovskiy/web-utils-admin-er/main/er.ru-topnews.user.js
// ==/UserScript==

(function() {
    'use strict';

    // ===== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø =====
    const CONFIG = {
        debugMode: true, // –í–∫–ª—é—á–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        maxWaitTime: 15000, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–º—Å)
        pollInterval: 500, // –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        updateCheckInterval: 24 * 60 * 60 * 1000, // –ü—Ä–æ–≤–µ—Ä—è—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
        githubUrl: 'https://api.github.com/repos/nnostrovskiy/web-utils-admin-er/contents/er.ru-topnews.user.js?ref=main',
        lastCheckKey: 'lastUpdateCheck_v2',
        ignoreUpdateKey: 'ignoreUpdateVersion_v2',
        dateOffsetDays: 7 // –ù–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –¥–∞—Ç—É
    };

    // ===== –°–ò–°–¢–ï–ú–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø =====
    const logger = {
        log: function(...args) {
            if (CONFIG.debugMode) {
                console.log('üìù –¢–û–ü-–ù–æ–≤–æ—Å—Ç–∏:', ...args);
            }
        },
        error: function(...args) {
            console.error('‚ùå –¢–û–ü-–ù–æ–≤–æ—Å—Ç–∏:', ...args);
        },
        warn: function(...args) {
            console.warn('‚ö†Ô∏è –¢–û–ü-–ù–æ–≤–æ—Å—Ç–∏:', ...args);
        },
        info: function(...args) {
            if (CONFIG.debugMode) {
                console.info('‚ÑπÔ∏è –¢–û–ü-–ù–æ–≤–æ—Å—Ç–∏:', ...args);
            }
        }
    };

    // ===== –£–¢–ò–õ–ò–¢–´ –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–û–ö =====
    function safeExecute(operation, operationName, fallback = null) {
        try {
            return operation();
        } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ –≤ ${operationName}:`, error);
            return fallback;
        }
    }

    function debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }

    // ===== –°–ò–°–¢–ï–ú–ê –û–ñ–ò–î–ê–ù–ò–Ø –≠–õ–ï–ú–ï–ù–¢–û–í =====
    function waitForElement(selector, timeout = CONFIG.maxWaitTime) {
        return new Promise((resolve, reject) => {
            const startTime = Date.now();
            
            // –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - —ç–ª–µ–º–µ–Ω—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            const existingElement = document.querySelector(selector);
            if (existingElement) {
                resolve(existingElement);
                return;
            }

            const observer = new MutationObserver(function(mutations) {
                const element = document.querySelector(selector);
                if (element) {
                    observer.disconnect();
                    resolve(element);
                } else if (Date.now() - startTime > timeout) {
                    observer.disconnect();
                    reject(new Error(`–≠–ª–µ–º–µ–Ω—Ç ${selector} –Ω–µ –Ω–∞–π–¥–µ–Ω –∑–∞ ${timeout}–º—Å`));
                }
            });

            observer.observe(document.body, {
                childList: true,
                subtree: true
            });

            // –†–µ–∑–µ—Ä–≤–Ω—ã–π —Ç–∞–π–º–∞—É—Ç
            setTimeout(() => {
                observer.disconnect();
                const element = document.querySelector(selector);
                if (element) {
                    resolve(element);
                } else {
                    reject(new Error(`–¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞: ${selector}`));
                }
            }, timeout);
        });
    }

    // ===== –°–ò–°–¢–ï–ú–ê –û–ë–ù–û–í–õ–ï–ù–ò–ô =====
    function compareVersions(a, b) {
        const aParts = a.split('.').map(Number);
        const bParts = b.split('.').map(Number);
        
        for (let i = 0; i < Math.max(aParts.length, bParts.length); i++) {
            const aVal = aParts[i] || 0;
            const bVal = bParts[i] || 0;
            if (aVal > bVal) return 1;
            if (aVal < bVal) return -1;
        }
        return 0;
    }

    function checkForUpdates() {
        return safeExecute(() => {
            const lastCheck = GM_getValue(CONFIG.lastCheckKey, 0);
            const now = Date.now();
            
            if (now - lastCheck < CONFIG.updateCheckInterval) {
                logger.info('–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø—Ä–æ–ø—É—â–µ–Ω–∞ (—Å–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ)');
                return;
            }
            
            logger.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å–∫—Ä–∏–ø—Ç–∞...');
            
            GM_xmlhttpRequest({
                method: 'GET',
                url: CONFIG.githubUrl,
                timeout: 10000,
                onload: function(response) {
                    GM_setValue(CONFIG.lastCheckKey, now);
                    
                    if (response.status !== 200) {
                        logger.warn('–û—à–∏–±–∫–∞ HTTP –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:', response.status);
                        return;
                    }
                    
                    try {
                        const fileData = JSON.parse(response.responseText);
                        if (!fileData.content) {
                            logger.warn('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ GitHub API');
                            return;
                        }
                        
                        // –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64 —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
                        const fileContent = atob(fileData.content.replace(/\s/g, ''));
                        const versionMatch = fileContent.match(/@version\s+([\d.]+)/);
                        
                        if (!versionMatch) {
                            logger.warn('–í–µ—Ä—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ñ–∞–π–ª–µ');
                            return;
                        }
                        
                        const latestVersion = versionMatch[1];
                        const currentVersion = GM_info.script.version;
                        
                        logger.log(`–í–µ—Ä—Å–∏–∏: —Ç–µ–∫—É—â–∞—è ${currentVersion}, –¥–æ—Å—Ç—É–ø–Ω–∞—è ${latestVersion}`);
                        
                        if (compareVersions(latestVersion, currentVersion) > 0) {
                            showUpdateNotification(currentVersion, latestVersion);
                        } else {
                            logger.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
                        }
                    } catch (parseError) {
                        logger.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ GitHub:', parseError);
                    }
                },
                onerror: function(error) {
                    logger.error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:', error);
                },
                ontimeout: function() {
                    logger.warn('–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π');
                }
            });
        }, 'checkForUpdates');
    }

    function showUpdateNotification(currentVersion, latestVersion) {
        safeExecute(() => {
            const ignoredVersion = GM_getValue(CONFIG.ignoreUpdateKey, '');
            if (ignoredVersion === latestVersion) {
                logger.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:', latestVersion);
                return;
            }
            
            const notificationText = `–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: ${currentVersion}\n–ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: ${latestVersion}\n\n–ù–∞–∂–º–∏—Ç–µ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.`;
            
            if (typeof GM_notification === 'function') {
                GM_notification({
                    title: '–î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞!',
                    text: notificationText,
                    image: 'https://github.com/favicon.ico',
                    timeout: 15000,
                    onclick: function() {
                        handleUpdateClick(currentVersion, latestVersion);
                    }
                });
            } else {
                // Fallback –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–æ–≤ –±–µ–∑ GM_notification
                if (confirm(`–î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞!\n\n${notificationText}\n\n–û—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è?`)) {
                    handleUpdateClick(currentVersion, latestVersion);
                }
            }
        }, 'showUpdateNotification');
    }

    function handleUpdateClick(currentVersion, latestVersion) {
        const install = confirm(
            `–î–æ—Å—Ç—É–ø–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è —Å–∫—Ä–∏–ø—Ç–∞ (${latestVersion})!\n\n` +
            `–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: ${currentVersion}\n\n` +
            '–•–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ?\n\n' +
            '–ù–∞–∂–º–∏—Ç–µ OK –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–ª–∏ –û—Ç–º–µ–Ω–∞, —á—Ç–æ–±—ã –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ.'
        );
        
        if (install) {
            window.open('https://github.com/nnostrovskiy/web-utils-admin-er/blob/main/er.ru-topnews.user.js', '_blank');
        } else {
            GM_setValue(CONFIG.ignoreUpdateKey, latestVersion);
            logger.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:', latestVersion);
        }
    }

    // ===== –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê –£–°–¢–ê–ù–û–í–ö–ò –î–ê–¢–´ =====
    let lastProcessedDate = '';

    function calculateEndDate(startDateValue) {
        return safeExecute(() => {
            if (!startDateValue || typeof startDateValue !== 'string') {
                throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏');
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç—É –¥–∞—Ç—É
            if (startDateValue === lastProcessedDate) {
                return null; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
            }

            const [datePart, timePart = '00:00'] = startDateValue.split(' ');
            const [day, month, year] = datePart.split('.').map(Number);
            
            // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–∞—Ç—ã
            if (!day || !month || !year || day > 31 || month > 12 || year < 2000) {
                throw new Error(`–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: ${startDateValue}`);
            }

            const startDate = new Date(year, month - 1, day);
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –¥–∞—Ç—ã
            if (isNaN(startDate.getTime())) {
                throw new Error(`–ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞: ${startDateValue}`);
            }

            const endDate = new Date(startDate);
            endDate.setDate(endDate.getDate() + CONFIG.dateOffsetDays);
            
            const formattedEndDate =
                `${String(endDate.getDate()).padStart(2, '0')}.` +
                `${String(endDate.getMonth() + 1).padStart(2, '0')}.` +
                `${endDate.getFullYear()} ${timePart}`;

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é –¥–∞—Ç—É
            lastProcessedDate = startDateValue;

            logger.log(`–†–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –¥–∞—Ç–∞: ${startDateValue} ‚Üí ${formattedEndDate}`);
            return formattedEndDate;
        }, 'calculateEndDate', null);
    }

    function setTopEndDate() {
        return safeExecute(() => {
            logger.log('–ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–∞—Ç—ã –¢–û–ü –Ω–æ–≤–æ—Å—Ç–∏...');
            
            const startDateInput = document.querySelector('input[name="start_date"]');
            const topEndDateInput = document.querySelector('input[name="top_end_date"]');

            if (!startDateInput || !topEndDateInput) {
                logger.warn('–ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –Ω–∞–π–¥–µ–Ω—ã');
                return false;
            }

            const startDateValue = startDateInput.value.trim();
            if (!startDateValue) {
                logger.log('–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø—É—Å—Ç–∞—è - –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞');
                return false;
            }

            const formattedEndDate = calculateEndDate(startDateValue);
            if (!formattedEndDate) {
                // null –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞ –¥–∞—Ç–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞
                return true;
            }

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
            if (topEndDateInput.value !== formattedEndDate) {
                topEndDateInput.value = formattedEndDate;
                
                // –¢—Ä–∏–≥–≥–µ—Ä–∏–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
                const events = ['change', 'input', 'blur'];
                events.forEach(eventType => {
                    topEndDateInput.dispatchEvent(new Event(eventType, { 
                        bubbles: true, 
                        cancelable: true 
                    }));
                });
                
                logger.info('‚úÖ –î–∞—Ç–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¢–û–ü –Ω–æ–≤–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞:', formattedEndDate);
                return true;
            } else {
                logger.log('–î–∞—Ç–∞ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
                return true;
            }
        }, 'setTopEndDate', false);
    }

    // ===== –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–û–ë–´–¢–ò–Ø–ú–ò –ò –ù–ê–ë–õ–Æ–î–ê–¢–ï–õ–Ø–ú–ò =====
    function setupEventListeners() {
        return safeExecute(() => {
            const startDateInput = document.querySelector('input[name="start_date"]');
            if (!startDateInput) {
                logger.warn('–ü–æ–ª–µ –¥–∞—Ç—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–ª—É—à–∞—Ç–µ–ª–µ–π');
                return false;
            }

            logger.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–æ–ª—è –¥–∞—Ç—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏...');

            // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å debounce
            const debouncedDateHandler = debounce(() => {
                setTimeout(setTopEndDate, 100);
            }, 500);

            const events = ['change', 'input', 'blur'];
            events.forEach(eventType => {
                startDateInput.addEventListener(eventType, debouncedDateHandler, {
                    passive: true,
                    capture: false
                });
            });

            // –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –∞—Ç—Ä–∏–±—É—Ç–æ–≤
            const attributeObserver = new MutationObserver(function(mutations) {
                mutations.forEach(function(mutation) {
                    if (mutation.type === 'attributes' && 
                        (mutation.attributeName === 'value' || mutation.attributeName === 'data-value')) {
                        debouncedDateHandler();
                    }
                });
            });

            attributeObserver.observe(startDateInput, {
                attributes: true,
                attributeFilter: ['value', 'data-value']
            });

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –¥–ª—è cleanup
            window._topNewsObservers = window._topNewsObservers || [];
            window._topNewsObservers.push(attributeObserver);

            logger.info('‚úÖ –°–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
            return true;
        }, 'setupEventListeners', false);
    }

    // ===== –í–ò–ó–£–ê–õ–¨–ù–´–ï –£–õ–£–ß–®–ï–ù–ò–Ø =====
    function addVisualIndicators() {
        return safeExecute(() => {
            const style = document.createElement('style');
            style.id = 'top-news-auto-date-styles';
            style.textContent = `
                input[name="top_end_date"] {
                    background-color: #f0f9ff !important;
                    border: 2px solid #3b82f6 !important;
                    position: relative;
                    transition: all 0.3s ease;
                }
                input[name="top_end_date"]:focus {
                    background-color: #e1f5fe !important;
                    border-color: #0288d1 !important;
                }
                .auto-date-indicator {
                    position: absolute;
                    right: 8px;
                    top: 50%;
                    transform: translateY(-50%);
                    background: linear-gradient(135deg, #3b82f6, #1d4ed8);
                    color: white;
                    padding: 3px 8px;
                    border-radius: 4px;
                    font-size: 11px;
                    font-weight: bold;
                    pointer-events: none;
                    z-index: 1000;
                    box-shadow: 0 2px 4px rgba(0,0,0,0.2);
                }
                .auto-date-success {
                    border-color: #10b981 !important;
                    background-color: #ecfdf5 !important;
                }
            `;
            document.head.appendChild(style);

            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∫ –ø–æ–ª—é
            const addIndicator = () => {
                const topEndInput = document.querySelector('input[name="top_end_date"]');
                if (topEndInput && !topEndInput.parentNode.querySelector('.auto-date-indicator')) {
                    const indicator = document.createElement('div');
                    indicator.className = 'auto-date-indicator';
                    indicator.textContent = '–∞–≤—Ç–æ';
                    indicator.title = '–î–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏';
                    
                    topEndInput.parentNode.style.position = 'relative';
                    topEndInput.parentNode.appendChild(indicator);
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–µ
                    topEndInput.classList.add('auto-date-success');
                    
                    logger.log('‚úÖ –í–∏–∑—É–∞–ª—å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω');
                }
            };

            // –ü—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ä–∞–∑—É –∏ —á–µ—Ä–µ–∑ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å
            setTimeout(addIndicator, 500);
            
            const indicatorObserver = new MutationObserver(addIndicator);
            indicatorObserver.observe(document.body, {
                childList: true,
                subtree: true
            });

            window._topNewsObservers = window._topNewsObservers || [];
            window._topNewsObservers.push(indicatorObserver);

            return true;
        }, 'addVisualIndicators', false);
    }

    // ===== –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò =====
    async function initialize() {
        logger.info('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–∞—Ç—ã –¢–û–ü –Ω–æ–≤–æ—Å—Ç–∏...');

        try {
            // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π
            await Promise.race([
                waitForElement('input[name="start_date"]'),
                waitForElement('input[name="top_end_date"]')
            ]);

            logger.log('‚úÖ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –Ω–∞–π–¥–µ–Ω—ã');

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
            setupEventListeners();
            addVisualIndicators();
            
            // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞—Ç—ã
            setTimeout(setTopEndDate, 1000);

        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
            
            // –†–µ–∑–µ—Ä–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            const backupCheck = setInterval(() => {
                const startDateInput = document.querySelector('input[name="start_date"]');
                const topEndDateInput = document.querySelector('input[name="top_end_date"]');
                
                if (startDateInput && topEndDateInput) {
                    clearInterval(backupCheck);
                    logger.log('‚úÖ –ü–æ–ª—è –Ω–∞–π–¥–µ–Ω—ã —á–µ—Ä–µ–∑ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É');
                    setupEventListeners();
                    addVisualIndicators();
                    setTopEndDate();
                }
            }, 1000);

            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
            setTimeout(() => clearInterval(backupCheck), CONFIG.maxWaitTime);
        }
    }

    // ===== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ñ–ò–ó–ù–ï–ù–ù–´–ú –¶–ò–ö–õ–û–ú =====
    function cleanup() {
        logger.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ —Å–∫—Ä–∏–ø—Ç–∞...');
        
        // –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ—Ö –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π
        if (window._topNewsObservers) {
            window._topNewsObservers.forEach(observer => {
                try {
                    observer.disconnect();
                } catch (e) {
                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
                }
            });
            window._topNewsObservers = [];
        }
        
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∏–ª–∏
        const styles = document.getElementById('top-news-auto-date-styles');
        if (styles) {
            styles.remove();
        }
        
        // –£–¥–∞–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        const indicators = document.querySelectorAll('.auto-date-indicator');
        indicators.forEach(indicator => indicator.remove());
        
        logger.log('‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    }

    // ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô =====
    
    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ —Å–∫—Ä–∏–ø—Ç–∞
    if (typeof GM_unload === 'function') {
        GM_unload(cleanup);
    }
    
    window.addEventListener('beforeunload', cleanup);
    window.addEventListener('pagehide', cleanup);

    // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    const globalObserver = new MutationObserver(debounce(function(mutations) {
        mutations.forEach(function(mutation) {
            if (mutation.addedNodes.length) {
                mutation.addedNodes.forEach(function(node) {
                    if (node.nodeType === 1 && node.querySelector) {
                        if (node.querySelector('input[name="start_date"]')) {
                            logger.log('üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—è –¥–∞—Ç');
                            setTimeout(() => {
                                setupEventListeners();
                                setTopEndDate();
                            }, 500);
                        }
                    }
                });
            }
        });
    }, 500));

    // ===== –ó–ê–ü–£–°–ö –°–ö–†–ò–ü–¢–ê =====
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', function() {
            logger.log('üìÑ DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –∑–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...');
            globalObserver.observe(document.body, {
                childList: true,
                subtree: true
            });
            initialize();
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (—Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏)
            setTimeout(checkForUpdates, 5000);
        });
    } else {
        logger.log('üìÑ DOM —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –∑–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...');
        globalObserver.observe(document.body, {
            childList: true,
            subtree: true
        });
        initialize();
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (—Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏)
        setTimeout(checkForUpdates, 5000);
    }

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    window.addEventListener('load', function() {
        logger.log('üéØ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω–∞, —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...');
        setTimeout(() => {
            setTopEndDate();
        }, 2000);
    });

})();
