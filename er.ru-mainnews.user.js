// ==UserScript==
// @name         –í—Å—Ç–∞–≤–∫–∞ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∞–±–∑–∞—Ü–µ–≤
// @namespace    http://tampermonkey.net/
// @version      1.0.0
// @description  –í—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ Ctrl+V, —Å–æ—Ö—Ä–∞–Ω—è—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∞–±–∑–∞—Ü—ã –∏ —É–±–∏—Ä–∞—è –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
// @author       –û—Å—Ç—Ä–æ–≤—Å–∫–∏–π –ù–∏–∫–æ–ª–∞–π –ù–∏–∫–æ–ª–∞–µ–≤–∏—á, –ó–∞–ø–æ—Ä–æ–∂—Å–∫–æ–µ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ –ü–∞—Ä—Ç–∏–∏ ¬´–ï–¥–∏–Ω–∞—è –†–æ—Å—Å–∏—è¬ª
// @match        https://admin.er.ru/admin/news/create
// @match        https://admin.er.ru/admin/news/*/edit
// @grant        none
// @run-at       document-end
// @updateURL    https://raw.githubusercontent.com/nnostrovskiy/web-utils-admin-er/main/er.ru-mainnews.user.js
// @downloadURL  https://raw.githubusercontent.com/nnostrovskiy/web-utils-admin-er/main/er.ru-mainnews.user.js
// ==/UserScript==

(function() {
    'use strict';

    // ===== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø =====
    const CONFIG = {
        debugMode: true,
        maxWaitTime: 15000,
        checkInterval: 500,
        editorId: 'richtextbody',
        visualStyles: {
            // üé® –¶–í–ï–¢–û–í–ê–Ø –°–•–ï–ú–ê –ò–ó –ü–†–ò–ú–ï–†–ê
            primaryBlue: '#3b82f6',
            primaryBlueDark: '#1d4ed8',
            primaryBlueLight: '#60a5fa',
            blueBackground: '#f0f9ff',
            blueFocusBackground: '#e1f5fe',
            blueBorder: '#3b82f6',
            blueFocusBorder: '#0288d1',
            successBackground: '#d4edda',
            successBorder: '#28a745',
            indicatorGradient: 'linear-gradient(135deg, #3b82f6, #1d4ed8)',
            successStateBackground: '#ecfdf5',
            successStateBorder: '#10b981',
            // üé® –¶–í–ï–¢–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
            notificationBackground: '#f8fafc',
            notificationBorder: '#e2e8f0',
            notificationSuccess: '#10b981',
            notificationInfo: '#3b82f6',
            notificationShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)'
        }
    };

    // ===== –°–ò–°–¢–ï–ú–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø =====
    const logger = {
        info: (message, data = null) => {
            if (CONFIG.debugMode) {
                console.log(`‚ÑπÔ∏è ${message}`, data || '');
            }
        },
        success: (message, data = null) => {
            if (CONFIG.debugMode) {
                console.log(`‚úÖ ${message}`, data || '');
            }
        },
        error: (message, error = null) => {
            if (CONFIG.debugMode) {
                console.error(`‚ùå ${message}`, error || '');
            }
        },
        warn: (message, data = null) => {
            if (CONFIG.debugMode) {
                console.warn(`‚ö†Ô∏è ${message}`, data || '');
            }
        }
    };

    // ===== –£–¢–ò–õ–ò–¢–´ –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–û–ö =====
    function safeExecute(operation, operationName, fallback = null) {
        try {
            return operation();
        } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ –≤ –æ–ø–µ—Ä–∞—Ü–∏–∏: ${operationName}`, error);
            return fallback;
        }
    }

    // ===== –°–ò–°–¢–ï–ú–ê –û–ñ–ò–î–ê–ù–ò–Ø –≠–õ–ï–ú–ï–ù–¢–û–í =====
    function waitForElement(selector, timeout = CONFIG.maxWaitTime) {
        return new Promise((resolve, reject) => {
            const startTime = Date.now();
            
            const checkElement = () => {
                const element = document.querySelector(selector);
                if (element) {
                    resolve(element);
                    return;
                }
                
                if (Date.now() - startTime >= timeout) {
                    reject(new Error(`–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: ${selector}`));
                    return;
                }
                
                setTimeout(checkElement, CONFIG.checkInterval);
            };
            
            checkElement();
        });
    }

    function waitForTinyMCE(editorId, timeout = CONFIG.maxWaitTime) {
        return new Promise((resolve, reject) => {
            const startTime = Date.now();
            
            const checkEditor = () => {
                const editor = window.tinymce && window.tinymce.get(editorId);
                if (editor) {
                    resolve(editor);
                    return;
                }
                
                if (Date.now() - startTime >= timeout) {
                    reject(new Error(`–†–µ–¥–∞–∫—Ç–æ—Ä TinyMCE –Ω–µ –Ω–∞–π–¥–µ–Ω: ${editorId}`));
                    return;
                }
                
                setTimeout(checkEditor, CONFIG.checkInterval);
            };
            
            checkEditor();
        });
    }

    // ===== –°–ò–°–¢–ï–ú–ê –ü–†–û–í–ï–†–ö–ò –û–ë–ù–û–í–õ–ï–ù–ò–ô =====
    function checkForUpdates() {
        logger.info('–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å–∫—Ä–∏–ø—Ç–∞ –≤—Å—Ç–∞–≤–∫–∏...');
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ @updateURL –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    }

    // ===== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –û–ë–†–ê–ë–û–¢–ö–ò –¢–ï–ö–°–¢–ê =====
    function cleanText(text) {
        return safeExecute(() => {
            if (!text) return '';
            
            let clean = text;
            
            // üîß –£–¥–∞–ª—è–µ–º HTML —Ç–µ–≥–∏
            clean = clean.replace(/<[^>]*>/g, '');
            
            // üîß –£–Ω–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
            clean = clean.replace(/\r\n/g, '\n');
            clean = clean.replace(/\r/g, '\n');
            
            // üîß –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
            let lines = clean.split('\n');
            lines = lines.map(line => {
                let trimmed = line.trim();
                trimmed = trimmed.replace(/[ \t]+/g, ' '); // –ó–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
                return trimmed;
            });
            
            // üîß –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∞–±–∑–∞—Ü–µ–≤
            let resultLines = [];
            for (let i = 0; i < lines.length; i++) {
                if (lines[i].length > 0) {
                    resultLines.push(lines[i]);
                } else if (i > 0 && i < lines.length - 1 && 
                          lines[i-1].length > 0 && lines[i+1].length > 0) {
                    resultLines.push('');
                }
            }
            
            logger.info('–¢–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω', { 
                originalLength: text.length, 
                cleanedLength: resultLines.join('\n').length,
                linesCount: resultLines.length 
            });
            
            return resultLines.join('\n');
        }, '–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞', '');
    }

    function formatTextWithParagraphs(text) {
        return safeExecute(() => {
            if (!text) return '';
            
            const lines = text.split('\n').filter(line => line.length > 0);
            if (lines.length === 0) return '';
            
            const formatted = lines.map(line => `<p>${line}</p>`).join('');
            
            logger.info('–¢–µ–∫—Å—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω', { 
                linesCount: lines.length,
                formattedLength: formatted.length 
            });
            
            return formatted;
        }, '–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞', '');
    }

    // ===== –í–ò–ó–£–ê–õ–¨–ù–´–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –ò –°–¢–ò–õ–ò =====
    function addVisualStyles() {
        return safeExecute(() => {
            const style = document.createElement('style');
            style.textContent = `
                /* üé® –°–¢–ò–õ–ò –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –û –í–°–¢–ê–í–ö–ï */
                .paste-notification {
                    position: fixed;
                    top: 20px;
                    right: 20px;
                    z-index: 10000;
                    padding: 12px 16px;
                    border-radius: 8px;
                    font-size: 14px;
                    font-weight: 500;
                    background: ${CONFIG.visualStyles.notificationBackground};
                    border: 1px solid ${CONFIG.visualStyles.notificationBorder};
                    box-shadow: ${CONFIG.visualStyles.notificationShadow};
                    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
                    transform: translateX(120%);
                    max-width: 300px;
                }

                .paste-notification.show {
                    transform: translateX(0);
                }

                .paste-notification.success {
                    border-left: 4px solid ${CONFIG.visualStyles.notificationSuccess};
                    background: ${CONFIG.visualStyles.successStateBackground};
                }

                .paste-notification.info {
                    border-left: 4px solid ${CONFIG.visualStyles.notificationInfo};
                    background: ${CONFIG.visualStyles.blueBackground};
                }

                .paste-notification .notification-icon {
                    display: inline-block;
                    margin-right: 8px;
                    font-weight: bold;
                }

                .paste-notification .notification-content {
                    display: flex;
                    align-items: center;
                }

                .paste-notification .notification-stats {
                    font-size: 12px;
                    opacity: 0.8;
                    margin-top: 4px;
                    font-weight: normal;
                }

                /* üé® –ê–ù–ò–ú–ê–¶–ò–ò */
                @keyframes slideInRight {
                    from {
                        transform: translateX(120%);
                        opacity: 0;
                    }
                    to {
                        transform: translateX(0);
                        opacity: 1;
                    }
                }

                @keyframes slideOutRight {
                    from {
                        transform: translateX(0);
                        opacity: 1;
                    }
                    to {
                        transform: translateX(120%);
                        opacity: 0;
                    }
                }

                .paste-notification.slide-in {
                    animation: slideInRight 0.3s ease-out;
                }

                .paste-notification.slide-out {
                    animation: slideOutRight 0.3s ease-in;
                }
            `;
            document.head.appendChild(style);
            logger.success('–í–∏–∑—É–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω—ã');
            return style;
        }, '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —Å—Ç–∏–ª–µ–π');
    }

    function showPasteNotification(message, type = 'success', duration = 3000) {
        return safeExecute(() => {
            // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            const existingNotifications = document.querySelectorAll('.paste-notification');
            existingNotifications.forEach(notification => notification.remove());
            
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            const notification = document.createElement('div');
            notification.className = `paste-notification ${type} slide-in`;
            notification.innerHTML = `
                <div class="notification-content">
                    <span class="notification-icon">${type === 'success' ? '‚úÖ' : '‚ÑπÔ∏è'}</span>
                    ${message}
                </div>
            `;
            
            document.body.appendChild(notification);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            setTimeout(() => {
                notification.classList.add('show');
            }, 10);
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ
            setTimeout(() => {
                notification.classList.remove('show');
                notification.classList.add('slide-out');
                setTimeout(() => {
                    if (notification.parentNode) {
                        notification.parentNode.removeChild(notification);
                    }
                }, 300);
            }, duration);
            
            logger.info('–ü–æ–∫–∞–∑–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ', { message, type, duration });
            return notification;
        }, '–ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—Å—Ç–∞–≤–∫–µ');
    }

    // ===== –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê =====
    function setupPasteHandler() {
        return safeExecute(async () => {
            logger.info('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...');
            
            try {
                const editor = await waitForTinyMCE(CONFIG.editorId);
                logger.success('–†–µ–¥–∞–∫—Ç–æ—Ä TinyMCE –Ω–∞–π–¥–µ–Ω', editor);
                
                // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è paste —á–µ—Ä–µ–∑ API TinyMCE
                editor.on('paste', function(e) {
                    safeExecute(() => {
                        if (e.clipboardData) {
                            const pastedText = e.clipboardData.getData('text/plain');
                            if (pastedText) {
                                e.preventDefault();
                                
                                logger.info('–ü–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–∞ –≤—Å—Ç–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Ctrl+V', { 
                                    textLength: pastedText.length 
                                });
                                
                                // –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç
                                const clean = cleanText(pastedText);
                                
                                // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∞–±–∑–∞—Ü–µ–≤
                                const formattedText = formatTextWithParagraphs(clean);
                                
                                // –í—Å—Ç–∞–≤–ª—è–µ–º –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä
                                editor.insertContent(formattedText);
                                
                                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                                const linesCount = clean.split('\n').filter(line => line.length > 0).length;
                                showPasteNotification(
                                    `–¢–µ–∫—Å—Ç –≤—Å—Ç–∞–≤–ª–µ–Ω –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è`,
                                    'success',
                                    2000
                                );
                                
                                logger.success('–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç–∞–≤–ª–µ–Ω', { 
                                    originalLines: pastedText.split('\n').length,
                                    cleanedLines: linesCount,
                                    formatted: formattedText.length > 0 
                                });
                            }
                        }
                    }, '–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞');
                });
                
                logger.success('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å—Ç–∞–≤–∫–∏ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω!');
                return true;
                
            } catch (error) {
                logger.error('–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤—Å—Ç–∞–≤–∫–∏', error);
                return false;
            }
        }, '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤—Å—Ç–∞–≤–∫–∏');
    }

    // ===== –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –†–ï–ó–ï–†–í–ù–û–ì–û –í–ê–†–ò–ê–ù–¢–ê =====
    function setupFallbackPasteHandler() {
        return safeExecute(() => {
            logger.info('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤—Å—Ç–∞–≤–∫–∏...');
            
            document.addEventListener('paste', function(e) {
                const activeElement = document.activeElement;
                const isTinyMCEActive = activeElement.closest('.tox-edit-area') || 
                                       activeElement.closest('.mce-content-body');
                
                if (isTinyMCEActive) {
                    const pastedText = e.clipboardData.getData('text/plain');
                    if (pastedText) {
                        e.preventDefault();
                        
                        const clean = cleanText(pastedText);
                        const formattedText = formatTextWithParagraphs(clean);
                        
                        // –ò—Å–ø–æ–ª—å–∑—É–µ–º execCommand –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
                        document.execCommand('insertHTML', false, formattedText);
                        
                        showPasteNotification(
                            `–¢–µ–∫—Å—Ç –≤—Å—Ç–∞–≤–ª–µ–Ω (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥)`,
                            'info',
                            2000
                        );
                        
                        logger.info('–¢–µ–∫—Å—Ç –≤—Å—Ç–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥', {
                            textLength: pastedText.length,
                            cleanedLength: clean.length
                        });
                    }
                }
            });
            
            logger.success('–†–µ–∑–µ—Ä–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å—Ç–∞–≤–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
            return true;
        }, '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞');
    }

    // ===== –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–û–ë–´–¢–ò–Ø–ú–ò =====
    function setupEventListeners() {
        logger.info('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π...');
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω—ã –∑–¥–µ—Å—å
    }

    // ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø =====
    async function initialize() {
        logger.info('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞ –≤—Å—Ç–∞–≤–∫–∏ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...');
        
        try {
            // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏
            await safeExecute(addVisualStyles, '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π');
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            const mainHandlerSuccess = await safeExecute(setupPasteHandler, '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞');
            
            // –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π
            if (!mainHandlerSuccess) {
                logger.warn('–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é —Ä–µ–∑–µ—Ä–≤–Ω—ã–π...');
                await safeExecute(setupFallbackPasteHandler, '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞');
            }
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            await safeExecute(setupEventListeners, '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            await safeExecute(checkForUpdates, '–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π');
            
            logger.success('‚úÖ –°–∫—Ä–∏–ø—Ç –≤—Å—Ç–∞–≤–∫–∏ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!');
            logger.info('üìù –ê–≤—Ç–æ—Ä: –û—Å—Ç—Ä–æ–≤—Å–∫–∏–π –ù–∏–∫–æ–ª–∞–π –ù–∏–∫–æ–ª–∞–µ–≤–∏—á, –ó–∞–ø–æ—Ä–æ–∂—Å–∫–æ–µ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ –ü–∞—Ä—Ç–∏–∏ ¬´–ï–¥–∏–Ω–∞—è –†–æ—Å—Å–∏—è¬ª');
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞ –≤—Å—Ç–∞–≤–∫–∏', error);
        }
    }

    // ===== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ñ–ò–ó–ù–ï–ù–ù–´–ú –¶–ò–ö–õ–û–ú =====
    function cleanup() {
        logger.info('–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ —Å–∫—Ä–∏–ø—Ç–∞ –≤—Å—Ç–∞–≤–∫–∏...');
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const notifications = document.querySelectorAll('.paste-notification');
        notifications.forEach(notification => notification.remove());
    }

    // ===== –ó–ê–ü–£–°–ö –°–ö–†–ò–ü–¢–ê =====
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', function() {
            initialize().catch(error => {
                logger.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞ –≤—Å—Ç–∞–≤–∫–∏', error);
            });
        });
    } else {
        initialize().catch(error => {
            logger.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞ –≤—Å—Ç–∞–≤–∫–∏', error);
        });
    }

    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    window.addEventListener('beforeunload', cleanup);


})();
